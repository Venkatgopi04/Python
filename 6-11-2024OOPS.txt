Working on super() keyword:
==================
super() is a keyword in Python.The main objective of super() keyword is to access the
the parent members in child classes.Members can be either methods or variables


Ex1:
===
import time 
class Person_Class:
    def __init__(self,name,age):
        self.name=name 
        self.age=age 
    def m1(self):
        print("Name is:",self.name)
        print("Age is:",self.age)
class Employee_Class(Person_Class):
    def __init__(self,name,age,eid,esal,design,company):
        super().__init__(name,age)
        self.eid=eid 
        self.esal=esal 
        self.design=design 
        self.company=company 
    def m2(self):
        super().m1()
        print("Eid is:",self.eid)
        print("Esal is:",self.esal)
        print("Design is:",self.design)
        print("Company is:",self.company)
class Customer_Class(Person_Class):
    def __init__(self,name,age,cid,address,city,mobile_number):
        super().__init__(name,age)
        self.cid=cid 
        self.address=address 
        self.city=city 
        self.mobile_number=mobile_number
    def m3(self):
        super().m1()
        print("Cid is:",self.cid)
        print("Address is:",self.address)
        print("City is:",self.city)
        print("Mobile_number is:",self.mobile_number)
e1=Employee_Class("Jessica_1",26,1001,49000.0,"Python Developer","HCL")
e1.m2()
print()
c1=Customer_Class("Rahul_1",23,1007,"Mumbai","Bandra","+91-7654123412")
c1.m3()
print()
time.sleep(2)
print("End of an application")


->Can we access the all four methods of parent class into child class constructor using
super().
=======================================================
Yes.


Ex1:
==
import time 
class I_HUB_IT_SERVICES:
    def __init__(self):
        print("Full Stack Python Developer")
    def m1(self):
        print("Python Developer")
    @classmethod 
    def m2(cls):
        print("Data Engineer")
    @staticmethod 
    def m3():
        print("Angular/React Developer")
class I_HUB_APP_STORE(I_HUB_IT_SERVICES):
    def __init__(self):
        super().__init__()
        super().m1()
        super().m2()
        super().m3()
i1=I_HUB_APP_STORE()
print()
time.sleep(2)
print("End of an application")
->Can we access the all four methods of parent class into child class Instance method using
super().
=======================================================
Yes.


Ex1:
===
import time 
class I_HUB_IT_SERVICES:
    def __init__(self):
        print("Full Stack Python Developer")
    def m1(self):
        print("Python Developer")
    @classmethod 
    def m2(cls):
        print("Data Engineer")
    @staticmethod 
    def m3():
        print("Angular/React Developer")
class I_HUB_APP_STORE(I_HUB_IT_SERVICES):
    def S1(self):
        super().__init__()
        super().m1()
        super().m2()
        super().m3() 
i1=I_HUB_APP_STORE()
i1.S1()
print()
time.sleep(2)
print("End of an application")
   

Note:
====
We cannot access the all four methods of parent class into child class classmethod and
static method


Ex1:
===
import time 
class I_HUB_1:
    def m1(self):
        print("This is service_one")
class I_HUB_2(I_HUB_1):
    def m1(self):
        print("This is service_two")
class I_HUB_3(I_HUB_2):
    def m1(self):
        print("This is service_three")
class I_HUB_4(I_HUB_3):
    def m1(self):
        print("This is service_four")
class I_HUB_5(I_HUB_4):
    def m1(self):
        I_HUB_1.m1(self)
i1=I_HUB_5()
i1.m1()
print()
time.sleep(2)
print("End of an application")


Ex2:
===
import time 
class I_HUB_1:
    def m1(self):
        print("This is service_one")
class I_HUB_2(I_HUB_1):
    def m1(self):
        print("This is service_two")
class I_HUB_3(I_HUB_2):
    def m1(self):
        print("This is service_three")
class I_HUB_4(I_HUB_3):
    def m1(self):
        print("This is service_four")
class I_HUB_5(I_HUB_4):
    def m1(self):
        super(I_HUB_2,self).m1()
i1=I_HUB_5()
i1.m1()
print()
time.sleep(2)
print("End of an application")


Ex3:
===
import time 
class I_HUB_1:
    def m1(self):
        print("This is service_one")
class I_HUB_2(I_HUB_1):
    def m1(self):
        print("This is service_two")
class I_HUB_3(I_HUB_2):
    def m1(self):
        print("This is service_three")
class I_HUB_4(I_HUB_3):
    def m1(self):
        print("This is service_four")
class I_HUB_5(I_HUB_4):
    def m1(self):
        super(I_HUB_2,self).m1()
        I_HUB_1.m1(self)
i1=I_HUB_5()
i1.m1()
print()
time.sleep(2)
print("End of an application")


Ex4:
===
import time 
class I_HUB_APP_STORE:
    Pid=1001 
    def __init__(self):
        self.Pname="Mobile_1"
class I_HUB_1(I_HUB_APP_STORE):
    def m1(self):
        print("Product_Id is:",super().Pid)
        print()
        print("Product_Name is:",super().Pname)
i1=I_HUB_1()
i1.m1()
print()
time.sleep(3)
print("End of an application")


OUTPUT:
======

C:\Users\Admin\Desktop>Python test1.py
Product_Id is: 1001

Traceback (most recent call last):
  File "test1.py", line 12, in <module>
    i1.m1()
  File "test1.py", line 10, in m1
    print("Product_Name is:",super().Pname)
AttributeError: 'super' object has no attribute 'Pname'

C:\Users\Admin\Desktop>


Ex5:
===
import time 
class I_HUB_APP_STORE:
    Pid=1001 
    def __init__(self):
        self.Pname="Mobile_1"
class I_HUB_1(I_HUB_APP_STORE):
    def m1(self):
        print("Product_Id is:",super().Pid)
        print()
        print("Product_Id is:",I_HUB_1.Pid)
        print()
        print("Product_Name is:",self.Pname)
i1=I_HUB_1()
i1.m1()
print()
time.sleep(3)
print("End of an application")



       



