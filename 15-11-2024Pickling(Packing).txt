tell():
===
It is a predefine function in Python while working with File handling.The main objective of
tell() function is to know the current cursor_pointer of file.Bydefault current_cursor_file_pointer is
0


Ex1:
===
import time 
f1=open("ihub_1.txt","r")
obj1=f1.tell()
print("Current_File_Pointer_Position is:",obj1)
print()
obj2=f1.read(15)
print(obj2)
print()
obj3=f1.tell()
print("Current_File_Pointer_Position is:",obj3)
print()
f1.close()
print()
time.sleep(2)
print("End of an application")


seek():
====
It is a predefine function in Python while working with File handling.The main 
objective of seek() function is to change the position of file pointer.


Ex1:
===
import time 
f1=open("ihub_1.txt","r")
obj1=f1.tell()
print("Current_File_Pointer_Position is:",obj1)
print()
obj2=f1.read(15)
print(obj2)
print()
obj3=f1.tell()
print("Current_File_Pointer_Position is:",obj3)
print()
obj4=f1.seek(0)
print("Current_File_Pointer_Position is:",obj4)
print()
obj5=f1.read(15)
print(obj5)
print()
obj6=f1.tell()
print("Current_File_Pointer_Position is:",obj6)
print()
f1.close()
print()
time.sleep(2)
print("End of an application")


Q1)What is the difference between tell() and seek functions.



Creating a file using with statement:
======================
Creating a file using with statement file will be closed automatically.

with open("File_Name","Mode") as f:
                -----


Ex1:
===
import time 
with open("ihub_1.txt","r") as f:
    print("=====File_Details=====")
    print("File_Name is:",f.name)
    print("File_Mode is:",f.mode)
    print("File_Closed:",f.closed)
    print("File_readable:",f.readable())
    print("File is writable:",f.writable())
print()
print("File_Closed:",f.closed)
print()
time.sleep(3)
print("End of an application")


Ex2:
===
import time 
with open("ABC.txt","w") as f:
    f.write("12345\n")
    f.write("54321\n")
    f.write("33661\n")
    f.write("77661\n")
    print()
    print("File is created successfully")
print()
time.sleep(3)
print("End of an application")


Ex3:
==
import time 
with open("ABC.txt","r") as f:
    print("File_Name is:",f.name)
    print()
    obj1=f.read()
    print(obj1)

print()
time.sleep(3)
print("End of an application")


Ex4:
===
import time 
with open("ABC.txt","r") as f:
    print("File_Name is:",f.name)
    print()
    obj1=f.readlines()
    for x1 in obj1:
        print(x1,end=" ")
    print()

print()
time.sleep(3)
print("End of an application")

->Pickling(Packing) & Unpickling(Unpacking):
============================

Pickling(Packing):
===========
Python supports Pickling/Packing.It is the process or methodlogy to store the object  with
it's properties into a binary format.To implement Picking methodlogy we do have a module name
picke module inside the pickle module we do have sub module named as dump(obj,f_name)


Ex1:
==
import time 
import pickle 
class Train_Information_Class:
    def __init__(self,tno,tname,arrtime,depttime,date,source,destination):
        self.tno=tno 
        self.tname=tname 
        self.arrtime=arrtime 
        self.depttime=depttime 
        self.date=date 
        self.source=source 
        self.destination=destination
    def m1(self):
        print("====Train_Information====")
        print("tno is:",self.tno)
        print("tname is:",self.tname)
        print("Arrtime is:",self.arrtime)
        print("Depttime is:",self.depttime)
        print("Date is:",self.date)
        print("Source is:",self.source)
        print("Destination is:",self.destination)
with open("ihub_5.txt","wb") as f:
    t1=Train_Information_Class(1001,"RE","11:00 AM","12:30 PM","19/11/2024","Hyderabad","Delhi")
    pickle.dump(t1,f)
    print()
    print("Pickling/Packing is done successfully ...")
print()
time.sleep(2)
print("End of an application")


Unpickling(Unpacking):
==============
Python supports Unpickling/Unpacking.It is process or methodlogy to read the day from file which is
binary format in actual format then it is said to be Unpickling/Unpicking.Inside the pickle module 
we do have a submodule named as load(f)


Ex1:
===
import time 
import pickle 
class Train_Information_Class:
    def __init__(self,tno,tname,arrtime,depttime,date,source,destination):
        self.tno=tno 
        self.tname=tname 
        self.arrtime=arrtime 
        self.depttime=depttime 
        self.date=date 
        self.source=source 
        self.destination=destination
    def m1(self):
        print("====Train_Information====")
        print("tno is:",self.tno)
        print("tname is:",self.tname)
        print("Arrtime is:",self.arrtime)
        print("Depttime is:",self.depttime)
        print("Date is:",self.date)
        print("Source is:",self.source)
        print("Destination is:",self.destination)
with open("ihub_5.txt","rb") as f:
    obj1=pickle.load(f)
    obj1.m1()
    print()
    print("Unpickling is done successfully ...")
   
print()
time.sleep(2)
print("End of an application")


test1.py:
=====
class Train_Information_Class:
    def __init__(self,tno,tname,arrtime,depttime,date,source,destination):
        self.tno=tno 
        self.tname=tname 
        self.arrtime=arrtime 
        self.depttime=depttime 
        self.date=date 
        self.source=source 
        self.destination=destination
    def m1(self):
        print("====Train_Information====")
        print("tno is:",self.tno)
        print("tname is:",self.tname)
        print("Arrtime is:",self.arrtime)
        print("Depttime is:",self.depttime)
        print("Date is:",self.date)
        print("Source is:",self.source)
        print("Destination is:",self.destination)

test2.py:
=====
import time 
from test1 import *
import pickle 
f1=open("ihub_9.txt","wb")
n=eval(input("Enter the number of records:"))
for x1 in range(n):
    tno=int(input("Enter the tno:"))
    tname=input("Enter the tname:")
    arrtime=input("Enter the arr_time:")
    depttime=input("Enter the depttime:")
    date=input("Enter the date:")
    source=input("Enter the source:")
    destination=input("Enter the destination:")
    t1=Train_Information_Class(tno,tname,arrtime,depttime,date,source,destination)
    pickle.dump(t1,f1)
    print()
print("Pickling/Packing is done successfully ....")
print()
f1.close()
print()
time.sleep(2)
print('End of an application')

test3.py:
====
import time 
import test1 
import pickle 
f1=open("ihub_9.txt","rb")
while(True):
    try:
        obj1=pickle.load(f1)
        obj1.m1()
        print()
    except EOFError as e:
        print("Exception_Name is:",e)
        break
print()
f1.close()
print()
time.sleep(3)
print('End of an application')






















